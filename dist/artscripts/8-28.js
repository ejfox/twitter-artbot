// Generated by CoffeeScript 1.12.6
(function() {
  var Chance, GenArt, SimplexNoise, _, argv, art, canvasModule, d3, d3Node, fs, path, seed;

  fs = require('fs');

  d3 = require('d3');

  _ = require('lodash');

  d3Node = require('d3-node');

  canvasModule = require('canvas-prebuilt');

  Chance = require('chance');

  SimplexNoise = require('simplex-noise');

  path = require('path');

  argv = require('yargs').alias('s', 'seed').argv;

  seed = Date.now();

  GenArt = require('./GenArt');

  art = new GenArt(seed);

  art.filename = path.basename(__filename, '.js') + '-' + seed;

  art.count = art.width;

  art.numTicks = 2000;

  art.bgColor = '#999';

  art.fillColor = 'black';

  art.simplex = new SimplexNoise;

  art.makeParticles = function() {
    var amp;
    console.log('Making ' + this.count + ' particles');
    amp = this.chance.integer({
      min: 20,
      max: 100
    });
    this.data = d3.range(this.count).map((function(_this) {
      return function(d, i) {
        var c, x, y;
        x = i;
        y = Math.sin(x * Math.PI / 180);
        if (y >= 0) {
          y = (_this.height / 2) - (y - 0) * amp;
          d.color = 'red';
        } else if (y < 0) {
          y = (_this.height / 2) + (0 - y) * amp;
          d.color = 'blue';
        }
        c = d3.hsl(d.color);
        return {
          x: x,
          y: y,
          color: c.toString()
        };
      };
    })(this));
    return this.data;
  };

  art.tick = function() {
    var ticks;
    if (!this.ticks) {
      ticks = 0;
    }
    this.ticks++;
    this.theta += 0.02;
    return this.data.forEach((function(_this) {
      return function(d, i) {
        var noiseValue;
        noiseValue = _this.simplex.noise2D(d.x, d.y) * _this.chance.integer({
          min: 1,
          max: 15
        });
        if (_this.chance.bool({
          likelihood: 50
        })) {
          d.y += noiseValue;
        }
        _this.ctx.beginPath();
        _this.ctx.rect(d.x, d.y, 1, 1);
        _this.ctx.fillStyle = d.color;
        _this.ctx.fill();
        return _this.ctx.closePath();
      };
    })(this));
  };

  if (require.main === module) {
    art.init({
      save: true
    });
  }

  module.exports = GenArt;

}).call(this);
