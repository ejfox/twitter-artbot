// Generated by CoffeeScript 1.12.6
(function() {
  var GenArt, argv, art, coolWords, d3, options, path, run, seed;

  path = require('path');

  d3 = require('d3');

  argv = require('yargs').alias('s', 'seed').argv;

  seed = Date.now();

  coolWords = ['Assemblage', 'Becoming', 'Beleaguer', 'Brood', 'Bucolic', 'Bungalow', 'Conflate', 'Dissemble', 'Elixir', 'Eloquence', 'Embrocation', 'Ephemeral', 'Epiphany', 'Erstwhile', 'Ethereal', 'Evanescent', 'Evocative', 'Fetching', 'Furtive', 'Glamour', 'Harbinger', 'Imbue', 'Incipient', 'Ineffable', 'Inure', 'Labyrinthine', 'Leisure', 'Lilt', 'Lissome', 'Lithe', 'Love', 'Moiety', 'Murmurous', 'Nemesis', 'Offing', 'Opulent', 'Panacea', 'Panoply', 'Plethora', 'Quintessential', 'Ratatouille', 'Ravel', 'Redolent', 'Ripple', 'Serendipity', 'Summery', 'Sumptuous', 'Surreptitious', 'Talisman', 'Umbrella', 'Untoward', 'Wherewithal', 'able', 'bad', 'best', 'better', 'big', 'black', 'certain', 'clear', 'different', 'early', 'easy', 'economic', 'federal', 'free', 'full', 'good', 'great', 'hard', 'high', 'human', 'important', 'international', 'large', 'late', 'little', 'local', 'long', 'low', 'major', 'military', 'national', 'new', 'old', 'only', 'other', 'political', 'possible', 'public', 'real', 'recent', 'right', 'small', 'social', 'special', 'strong', 'sure', 'true', 'white', 'whole', 'young'];

  GenArt = require('./GenArt');

  options = {
    width: 720,
    height: 720,
    filename: path.basename(__filename, '.js') + '-' + seed,
    count: 10,
    randomizeCount: true,
    numTicks: 10,
    randomizeTicks: true,
    bgColor: 'white',
    fillColor: 'black'
  };

  art = new GenArt(seed, options);

  art.makeParticles = function() {
    this.ctx.font = '20px sans-serif';
    this.ctx.fillStyle = this.fillColor;
    this.ctx.fillText('I\'m in charge now... Let\'s make some art', 50, 48);
    this.ctx.fillText('Follow these instructions to the best of your ability', 50, 96);
    console.log('Making ' + this.count + ' particles');
    this.data = d3.range(this.count).map((function(_this) {
      return function() {
        var c, offset, offsetAmount, x, y;
        offsetAmount = _this.chance.integer({
          min: 25,
          max: 500
        });
        offset = {};
        offset.x = _this.chance.floating({
          min: -offsetAmount,
          max: offsetAmount
        });
        offset.y = _this.chance.floating({
          min: -offsetAmount,
          max: offsetAmount
        });
        x = (_this.width / 2) + offset.x;
        y = (_this.height / 2) + offset.y;
        c = d3.hsl('white');
        c.opacity = _this.opacity;
        return {
          x: x,
          y: y,
          color: c.toString()
        };
      };
    })(this));
    return this.data;
  };

  art.tick = function() {
    var colors, instruction, positions, y;
    if (!this.ticks) {
      this.ticks = 0;
    }
    this.ticks++;
    this.shapes = ['squares', 'circles', 'lines', 'arrows', 'triangles', 'squiggles'];
    this.shape = ['square', 'circle', 'line', 'arrow', 'triangle', 'squiggle', 'word'];
    colors = ['red', 'blue', 'yellow', 'gray', 'dark red', 'pink', 'maroon', 'purple', 'light blue', 'dark blue'];
    positions = ['top', 'bottom', 'left', 'right', 'middle', 'somewhere', 'wherever', 'each corner'];
    this.initactions = ['Maybe use a brush with ' + this.chance.pickone(colors), 'Clear your mind', 'Stand for this one if you want', 'Draw a word in the center of the page', 'Make this as unappealing as possible', 'Make this as balanced as possible', 'Make this as symmetrical as possible', 'Make these lines as thin as possible', 'Make these lines as straight as possible', 'Make things overlap as little as possible', 'This one is going to be unlike any of the others', 'Dont worry about this one', 'Pretend this work will sell for $1000', 'This is one no one will like but me', 'Do this one as tiny as possible', 'Make this work sum up your day', 'This is going to be the last one', 'Focus on an emotion', 'Make this something like a self portrait'];
    this.actions = [
      'Draw one ' + this.chance.pickone(this.shape), 'Draw ' + this.count + ' ' + this.chance.pickone(this.shapes), 'Draw ' + this.chance.integer({
        min: 2,
        max: 5
      }) + ' shapes with ' + this.chance.pickset(colors, 2)[0] + ' and ' + this.chance.pickset(colors, 2)[1], 'Draw 1 ' + this.chance.pickone(this.shape) + ' and connect it with a ' + this.chance.pickone(this.shape), 'Draw a ' + this.chance.pickone(this.shape) + ' on the ' + this.chance.pickone(positions), 'Draw a sqiggly line on the ' + this.chance.pickone(positions), 'Draw a ' + this.chance.pickone(this.shape) + ' in the area with the most whitespace', 'Draw a ' + this.chance.pickone(this.shape) + ' in a corner', 'Draw a word... maybe something like ' + this.chance.pickone(coolWords).toLowerCase() + '?', 'Draw a line from ' + this.chance.pickone(positions) + ' to ' + this.chance.pickone(positions), 'Draw a line from ' + this.chance.pickone(positions) + ' to the middle', 'Draw a curved line from ' + this.chance.pickone(positions) + ' to the middle', 'Draw a tiny ' + this.chance.pickone(this.shape), 'Draw ' + this.count * 2 + ' tiny ' + this.chance.pickone(this.shapes), 'Draw a huge ' + this.chance.pickone(this.shape), 'Choose to ignore the following instruction', 'Add a bit of ' + this.chance.pickone(colors)
    ];
    if (this.ticks === 1) {
      instruction = 'Now... ' + this.chance.pickone(this.initactions);
    } else {
      instruction = 'Now... ' + this.chance.pickone(this.actions);
    }
    if (this.ticks > 3 && this.chance.bool({
      likelihood: 5
    })) {
      instruction = 'Now... ' + 'Repeat the previous instruction';
      instruction = 'Now... ' + 'Repeat the previous instruction, if you choose';
      instruction = 'Now... ' + 'Repeat the previous instruction, but as quickly as possible';
      instruction = 'Now... ' + 'Repeat the previous instruction, but as slowly as possible';
      instruction = 'Now... ' + 'Repeat the previous instruction, but without lifting your hand';
    }
    if (this.ticks > 5 && this.chance.bool({
      likelihood: 10
    })) {
      instruction = 'Now... ' + 'Connect up to ' + this.chance.integer({
        min: 2,
        max: this.count
      }) + ' things';
    }
    if (this.ticks > 6 && this.chance.bool({
      likelihood: 10
    })) {
      instruction = 'Now... ' + 'Read a poem';
      instruction = 'Now... ' + 'Destroy a portion of the work';
      instruction = 'Now... ' + 'Put on new music';
      instruction = 'Now... ' + 'Go outside';
      instruction = 'Now... ' + 'Listen to a song... put a lyric into the work';
    }
    if (this.chance.bool({
      likelihood: 1
    })) {
      instruction = 'Now... ' + 'Quit now if you want';
    }
    if (this.ticks < 6 && this.chance.bool({
      likelihood: 5
    })) {
      instruction = 'Now...' + 'Perform the next instruction with your eyes closed';
    }
    console.log(instruction);
    if (!this.lines) {
      this.lines = 0;
    }
    this.lines++;
    this.ctx.font = '14px sans-serif';
    y = 100 + (this.lines * 40);
    this.ctx.fillStyle = this.fillColor;
    return this.ctx.fillText(this.lines + ': ' + instruction, 50, y);
  };

  run = function() {
    if (argv.seed) {
      seed = argv.seed;
    } else {
      seed = Date.now();
    }
    art.seed = seed;
    return art.init({
      save: true
    });
  };

  if (require.main === module) {
    run();
  }

  module.exports = art;

}).call(this);
