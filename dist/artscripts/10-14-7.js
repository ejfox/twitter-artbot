// Generated by CoffeeScript 1.12.6
(function() {
  var GenArt, OBJLoader, _, argv, art, clColors, d3, objData, options, path, run, seed;

  path = require('path');

  d3 = require('d3');

  _ = require('lodash');

  argv = require('yargs').alias('s', 'seed').argv;

  seed = Date.now();

  global.THREE = require('../../lib/three/three.js');

  require('../../lib/three/canvasrenderer.js');

  require('../../lib/three/projector.js');

  clColors = require('nice-color-palettes/100');

  OBJLoader = require('three-obj-loader');

  OBJLoader(THREE);

  GenArt = require('./GenArt');

  options = {
    filename: path.basename(__filename, '.js') + '-' + seed,
    count: 25,
    randomizeCount: true,
    numTicks: 10,
    randomizeTicks: true,
    bgColor: 'white',
    fillColor: 'black'
  };

  objData = require('../models/trump.json');

  art = new GenArt(seed, options);

  art.makeParticles = function() {
    var bg, camSize, loader, material, mesh;
    if (this.chance.bool()) {
      this.colors = this.chance.pickone(clColors);
    } else {
      this.colors = ['#999', '#CCC', '#000', '#FFF'];
    }
    console.log('colors ->', this.colors);
    this.cubes = [];
    this.scene = new THREE.Scene();
    bg = this.colors[this.colors.length - 1];
    this.colors.pop();
    this.scene.background = new THREE.Color(bg);
    camSize = this.chance.integer({
      min: 18,
      max: 72
    });
    this.camera = new THREE.PerspectiveCamera(camSize, 1, 1, 10000);
    this.light = new THREE.PointLight(new THREE.Color(this.chance.pickone(this.colors)), 1.2);
    this.light.position.set(0, 0, 12);
    this.light.castShadow = true;
    this.light.position.y = this.chance.integer({
      min: -25,
      max: 25
    });
    this.light.position.z = this.chance.integer({
      min: 25,
      max: 90
    });
    this.scene.add(this.light);
    this.canvas.style = {};
    this.renderer = new THREE.CanvasRenderer({
      canvas: this.canvas
    });
    this.renderer.shadowMapEnabled = true;
    this.renderer.shadowMapSoft = true;
    this.renderer.shaadowMapBias = 0.0039;
    this.renderer.shadowMapDarkness = this.chance.floating({
      min: 0.1,
      max: 0.8
    });
    this.renderer.shadowMapWidth = 1024;
    this.renderer.shadowMapHeight = 1024;
    this.renderer.setSize(this.width, this.height);
    this.renderer.setClearColor(0x3399ff);
    loader = new THREE.JSONLoader();
    loader.createModel(objData, function(done) {
      var geometry;
      return geometry = done;
    });
    material = new THREE.MeshLambertMaterial({
      color: new THREE.Color('#000'),
      wireframe: true
    });
    mesh = new THREE.Mesh(geometry, material);
    this.scene.add(mesh);
    console.log('Making ' + this.count + ' particles');
    this.data = d3.range(this.count).map((function(_this) {
      return function() {
        return {
          sup: 'sup'
        };
      };
    })(this));
    return this.data;
  };

  art.tick = function() {
    var ticks;
    if (!this.ticks) {
      ticks = 0;
    }
    this.ticks++;
    return this.renderer.render(this.scene, this.camera);
  };

  run = function() {
    if (argv.seed) {
      seed = argv.seed;
    } else {
      seed = Date.now();
    }
    art.seed = seed;
    return art.init({
      save: true
    });
  };

  if (require.main === module) {
    run();
  }

  module.exports = art;

}).call(this);
