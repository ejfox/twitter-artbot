// Generated by CoffeeScript 1.12.6
(function() {
  var Chance, GenArt, _, argv, canvasModule, d3, d3Node, fs, path, run,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  d3 = require('d3');

  _ = require('lodash');

  d3Node = require('d3-node');

  canvasModule = require('canvas-prebuilt');

  Chance = require('chance');

  path = require('path');

  argv = require('yargs').alias('s', 'seed').argv;

  GenArt = (function() {
    function GenArt(seed) {
      this.tick = bind(this.tick, this);
      this.makeParticles = bind(this.makeParticles, this);
      this.init = bind(this.init, this);
      var d3n;
      console.log('Seed:', seed);
      d3n = new d3Node({
        canvasModule: canvasModule
      });
      this.seed = seed;
      this.chance = new Chance(this.seed);
      this.count = 25;
      this.numTicks = 8;
      this.count = this.chance.integer({
        min: 1,
        max: this.count
      });
      this.numTicks = this.chance.integer({
        min: 1,
        max: this.numTicks
      });
      this.width = 1250;
      this.height = 1250;
      console.log('width', this.width, 'height', this.height);
      this.canvas = d3n.createCanvas(this.width, this.height);
      this.ctx = this.canvas.getContext('2d');
      this.ctx.fillStyle = 'white';
      this.ctx.fillRect(0, 0, this.width, this.height);
    }

    GenArt.prototype.init = function(options, callback) {
      if (options == null) {
        options = {};
      }
      this.makeParticles();
      this.tickTil(this.numTicks);
      if (options.save) {
        this.saveFile();
      }
      if (callback) {
        return callback();
      }
    };

    GenArt.prototype.makeParticles = function() {
      var baseText;
      console.log('Making ' + this.count + ' particles');
      baseText = ["pushing my cart through the supermarket", "today", "the thought passed through my mind", "that I could start", "knocking cans from the shelves and", "also rolls of towels, toilet paper,", "silver foil,", "I could throw oranges, bananas, tomatoes", "through the air, I could take cans of", "beer from the refrigerated section and", "start gulping them, I could pull up", "women's skirts, grab their asses,", "I could ram my shopping cart through", "the plate-glass window..."];
      this.data = d3.range(this.count).map((function(_this) {
        return function() {
          var c, x, y;
          x = (_this.width / 2) + _this.chance.floating({
            min: -200,
            max: 200
          });
          y = (_this.height / 2) + _this.chance.floating({
            min: -200,
            max: 200
          });
          c = d3.hsl('black');
          return {
            x: x,
            y: y,
            color: c.toString(),
            text: _this.chance.pickone(baseText),
            radius: _this.chance.integer({
              min: 20,
              max: _this.width / 2
            })
          };
        };
      })(this));
      return this.data;
    };

    GenArt.prototype.tick = function() {
      this.ticks++;
      return this.data.forEach((function(_this) {
        return function(d, i) {
          var c, chardWid, j, letter, randOffset, ref, results, startAngle, text, textSize;
          randOffset = 14;
          if (_this.chance.d100() > 50) {
            d.x -= _this.chance.integer({
              min: 0,
              max: randOffset
            });
          }
          if (_this.chance.d100() > 50) {
            d.y -= _this.chance.integer({
              min: 0,
              max: randOffset
            });
          }
          c = d3.hsl(d.color);
          c.h += _this.chance.natural({
            min: 0,
            max: 90
          });
          d.color = c.toString();
          _this.ctx.beginPath();
          _this.ctx.rect(d.x, d.y, 2, 2);
          _this.ctx.fillStyle = d.color;
          _this.ctx.fill();
          _this.ctx.closePath();
          textSize = _this.chance.integer({
            min: 9,
            max: 92
          });
          _this.ctx.font = textSize + ' serif';
          _this.ctx.translate(d.x, d.y);
          text = d.text.split('');
          startAngle = Math.PI;
          _this.ctx.textBaseline = 'middle';
          _this.ctx.textAlign = 'center';
          results = [];
          for (i = j = 0, ref = d.text.length; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
            chardWid = textSize / 2;
            letter = text[i];
            if (letter) {
              _this.ctx.rotate((chardWid / 2) / (d.radius / 2 - textSize));
              _this.ctx.fillText(letter, 0, 0 - d.radius / 2 + textSize / 2);
              results.push(_this.ctx.rotate((chardWid / 2) / (d.radius / 2 - textSize)));
            } else {
              results.push(void 0);
            }
          }
          return results;
        };
      })(this));
    };

    GenArt.prototype.tickTil = function(count) {
      var j, ref;
      console.log('Ticking ' + this.data.length + ' particles ' + count + ' times');
      console.time('ticked for');
      for (j = 0, ref = count; 0 <= ref ? j <= ref : j >= ref; 0 <= ref ? j++ : j--) {
        this.tick();
      }
      return console.timeEnd('ticked for');
    };

    GenArt.prototype.saveFile = function(filename) {
      var fileOutput;
      if (!filename) {
        filename = path.basename(__filename, '.js') + '-' + this.seed;
      }
      fileOutput = './dist/' + filename + '.png';
      console.log('canvas output --> ' + fileOutput);
      return this.canvas.pngStream().pipe(fs.createWriteStream(fileOutput));
    };

    return GenArt;

  })();

  run = (function(_this) {
    return function() {
      var genart, seed;
      if (argv.seed) {
        seed = argv.seed;
      } else {
        seed = Date.now();
      }
      genart = new GenArt(seed);
      if (argv.count) {
        genart.count = argv.count;
      }
      if (argv.ticks) {
        genart.numTicks = argv.ticks;
      }
      return genart.init({
        save: true
      });
    };
  })(this);

  module.exports = GenArt;

  if (require.main === module) {
    run();
  }

}).call(this);
