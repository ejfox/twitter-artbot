// Generated by CoffeeScript 1.12.6
(function() {
  var GenArt, _, argv, art, clColors, d3, options, path, run, seed;

  path = require('path');

  d3 = require('d3');

  argv = require('yargs').alias('s', 'seed').argv;

  seed = Date.now();

  _ = require('lodash');

  clColors = require('nice-color-palettes/500');

  GenArt = require('@ejfox/four-seventeen');

  options = {
    filename: path.basename(__filename, '.js') + '-' + seed,
    count: 64,
    randomizeCount: true,
    numTicks: 1500,
    bgColor: 'white',
    fillColor: 'black'
  };

  art = new GenArt(seed, options);

  art.makeParticles = function() {
    this.colors = this.chance.pickone(clColors);
    this.fillColor = this.chance.pickone(this.colors);
    this.bgColor = this.chance.pickone(this.colors);
    if (this.fillColor === this.bgColor) {
      this.bgColor = 'white';
    }
    this.ctx.fillStyle = this.bgColor;
    this.ctx.fillRect(0, 0, this.width, this.height);
    this.radiusMax = this.chance.integer({
      min: 2,
      max: 12
    });
    console.log('Making ' + this.count + ' particles');
    this.data = d3.range(this.count).map((function(_this) {
      return function() {
        var c, offset, offsetAmount, x, y;
        offsetAmount = _this.chance.integer({
          min: 25,
          max: 500
        });
        offset = {};
        offset.x = _this.chance.floating({
          min: -offsetAmount,
          max: offsetAmount
        });
        offset.y = _this.chance.floating({
          min: -offsetAmount,
          max: offsetAmount
        });
        x = (_this.width / 2) + offset.x;
        y = (_this.height / 2) + offset.y;
        c = d3.hsl(_this.fillColor);
        c.opacity = _this.opacity;
        if (_this.chance.bool({
          likelihood: 50
        })) {
          _this.radiusMax++;
        }
        return {
          x: x,
          y: y,
          color: c.toString(),
          radius: _this.chance.integer({
            min: 1,
            max: _this.radiusMax
          }),
          opacity: 0.9
        };
      };
    })(this));
    return this.data;
  };

  art.tick = function() {
    if (!this.ticks) {
      this.ticks = 0;
    }
    this.ticks++;
    return this.data.forEach((function(_this) {
      return function(d, i) {
        var c, noiseValue;
        noiseValue = _this.simplex.noise2D(d.x, d.y);
        d.radius += noiseValue * 0.1;
        if (_this.chance.bool({
          likelihood: 50
        })) {
          d.opacity += noiseValue * 0.1;
        }
        d.radius = _.clamp(d.radius, 0.1, _this.width);
        d.opacity = _.clamp(d.opacity, 0.1, 1);
        if (_this.chance.bool({
          likelihood: 50
        })) {
          d.x += _this.chance.floating({
            min: -2,
            max: 2
          });
        }
        if (_this.chance.bool({
          likelihood: 50
        })) {
          d.y += _this.chance.floating({
            min: -2,
            max: 2
          });
        }
        d.x += _this.chance.floating({
          min: -d.radius * 0.9,
          max: d.radius * 0.9
        });
        d.y += _this.chance.floating({
          min: -d.radius * 0.9,
          max: d.radius * 0.9
        });
        c = d3.hsl(d.color);
        c.opacity = d.opacity;
        _this.fillColor = c.toString();
        _this.ctx.beginPath();
        _this.ctx.arc(d.x, d.y, d.radius, 0, 2 * Math.PI);
        _this.ctx.fillStyle = _this.fillColor;
        _this.ctx.fill();
        return _this.ctx.closePath();
      };
    })(this));
  };

  run = function() {
    if (argv.seed) {
      seed = argv.seed;
    } else {
      seed = Date.now();
    }
    art.seed = seed;
    return art.init({
      save: true
    });
  };

  if (require.main === module) {
    run();
  }

  module.exports = art;

}).call(this);
