// Generated by CoffeeScript 1.12.6
(function() {
  var GenArt, _, argv, art, clColors, d3, deg2rad, options, path, run, seed;

  Math.radians = function(degrees) {
    return degrees * Math.PI / 180;
  };

  Math.degrees = function(radians) {
    return radians * 180 / Math.PI;
  };

  path = require('path');

  d3 = require('d3');

  argv = require('yargs').alias('s', 'seed').argv;

  _ = require('lodash');

  seed = Date.now();

  clColors = require('nice-color-palettes/500');

  GenArt = require('@ejfox/four-seventeen');

  deg2rad = Math.PI / 180;

  options = {
    filename: path.basename(__filename, '.js') + '-' + seed,
    numTicks: 8000,
    count: 32,
    randomizeTicks: true,
    randomizeCount: true,
    bgColor: 'white',
    constrainEdges: true,
    width: 2160,
    height: 2160
  };

  art = new GenArt(seed, options);

  art.makeParticles = function() {
    var c, column, composite, i, particleH, particleW, row, xpos, xposStart, ypos;
    console.log('Making ' + this.count + ' particles');
    this.colors = this.chance.pickone(clColors);
    this.ctx.fillStyle = this.chance.pickone(this.colors);
    this.ctx.fillRect(0, 0, this.width, this.height);
    if (this.chance.bool({
      likelihood: 30
    })) {
      composite = this.chance.pickone(['multiply', 'screen']);
      console.log(composite);
      this.ctx.globalCompositeOperation = composite;
    }
    xposStart = this.chance.integer({
      min: 40,
      max: this.width
    });
    xpos = xposStart;
    ypos = this.chance.integer({
      min: 20,
      max: this.width * 0.3
    });
    particleW = this.chance.integer({
      min: 50,
      max: this.width * 0.3
    });
    particleH = this.chance.integer({
      min: 50,
      max: this.width * 0.3
    });
    this.maxRadius = this.chance.integer({
      min: 10,
      max: this.width * 0.5
    });
    this.data = [];
    row = 0;
    i = 0;
    while (row < this.count / 2) {
      column = 0;
      c = d3.hsl(this.chance.pickone(this.colors));
      c.opacity = this.opacity;
      while (column < this.count / 2) {
        this.data.push({
          i: i,
          x: xpos,
          y: ypos,
          targetx: xpos + this.chance.integer({
            min: 40,
            max: 280
          }),
          targety: ypos + this.chance.integer({
            min: 40,
            max: 280
          }),
          xStepAmount: this.chance.floating({
            min: 0.1,
            max: 4
          }),
          yStepAmount: this.chance.floating({
            min: 0.1,
            max: 4
          }),
          radius: this.chance.integer({
            min: 0.5,
            max: 24
          }),
          sinRadius: this.chance.integer({
            min: 50,
            max: this.width * 0.7
          }),
          color: c.toString(),
          angle: this.chance.integer({
            min: 0,
            max: 180
          }),
          angleStep: this.chance.floating({
            min: 0.1,
            max: 2
          })
        });
        i++;
        xpos += particleW;
        column++;
      }
      xpos = xposStart;
      ypos += particleH;
      row++;
    }
    return this.data;
  };

  art.tick = function() {
    var ticks;
    if (!this.ticks) {
      ticks = 0;
    }
    this.ticks++;
    return this.data.forEach((function(_this) {
      return function(d, i) {
        var c, noiseValue, xStepAmount, yStepAmount;
        noiseValue = _this.simplex.noise2D(d.x, d.y) * 0.5;
        xStepAmount = d.xStepAmount * 0.25;
        yStepAmount = d.xStepAmount * 0.25;
        if (noiseValue > 0) {
          if (d.x < d.targetx) {
            d.x += xStepAmount;
          }
          if (d.x > d.targetx) {
            d.x -= xStepAmount;
          }
          if (d.y < d.targety) {
            d.y += yStepAmount;
          }
          if (d.y > d.targety) {
            d.y -= yStepAmount;
          }
        }
        d.x = d.x + Math.cos(d.angle * deg2rad);
        d.y = d.y + Math.sin(d.angle * deg2rad);
        d.angle += d.angleStep;
        if (d.angle > 360) {
          d.angle = 0;
        }
        c = d3.hsl(d.color);
        d.color = c.toString();
        if (_this.constrainEdges) {
          d.x = _.clamp(d.x, 0 + d.radius, _this.width - d.radius);
          if (d.y >= _this.height) {
            d.y = 0;
            d.yStepAmount = _this.chance.floating({
              min: 0.1,
              max: 5
            });
          }
          if (d.x >= _this.width) {
            d.x = 0;
            d.xStepAmount = _this.chance.floating({
              min: 0.1,
              max: 5
            });
          }
        }
        _this.ctx.beginPath();
        _this.ctx.arc(d.x, d.y, d.radius, 0, 2 * Math.PI);
        _this.ctx.fillStyle = d.color;
        _this.ctx.fill();
        if (d.y === d.targety && d.x === d.targetx) {
          _this.ctx.beginPath();
          _this.ctx.arc(d.x - (d.radius / 2), d.y - (d.radius / 2), d.radius * 2, 0, 2 * Math.PI);
          _this.ctx.fillStyle = 'red';
          return _this.ctx.fill();
        }
      };
    })(this));
  };

  run = function() {
    if (argv.seed) {
      seed = argv.seed;
    } else {
      seed = Date.now();
    }
    art.seed = seed;
    return art.init({
      save: true
    });
  };

  if (require.main === module) {
    run();
  }

  module.exports = art;

}).call(this);
