// Generated by CoffeeScript 1.12.6
(function() {
  var Chance, GenArt, _, argv, art, clColors, d3, options, path, run, seed;

  path = require('path');

  d3 = require('d3');

  _ = require('lodash');

  argv = require('yargs').alias('s', 'seed').argv;

  seed = Date.now();

  Chance = require('chance');

  clColors = require('nice-color-palettes/100');

  GenArt = require('@ejfox/four-seventeen');

  options = {
    filename: path.basename(__filename, '.js') + '-' + seed,
    count: 200,
    numTicks: 3500,
    bgColor: 'rgb(4, 6, 41)',
    fillColor: 'white',
    opacity: 1,
    randomizeCount: true,
    radius: 1,
    drawLinks: true
  };

  art = new GenArt(seed, options);

  art.makeParticles = function() {
    var i, j, ref;
    console.log('Making ' + this.count + ' particles');
    this.colors = this.chance.pickone(clColors);
    this.data = d3.range(this.count).map((function(_this) {
      return function(d, i) {
        var c, color, datum, offset, offsetAmount, x, y;
        offsetAmount = _this.chance.integer({
          min: 250,
          max: 900
        });
        offset = {};
        offset.x = _this.chance.floating({
          min: -offsetAmount,
          max: offsetAmount
        });
        offset.y = _this.chance.floating({
          min: -offsetAmount,
          max: offsetAmount
        });
        x = 0;
        y = (_this.height / 2) + offset.y;
        color = _this.chance.pickone(_this.colors);
        c = d3.hsl(color);
        c.opacity = _this.opacity;
        datum = {
          color: c.toString(),
          radius: _this.chance.natural({
            min: 1,
            max: 14
          }),
          opacity: _this.opacity
        };
        return datum;
      };
    })(this));
    this.links = [];
    for (i = j = 0, ref = this.data.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      this.links.push({
        source: 1,
        target: i
      });
    }
    this.simulation = d3.forceSimulation(this.data).alphaDecay(0.0005).force('charge', d3.forceManyBody()).force('collide', d3.forceCollide((function(_this) {
      return function(d) {
        return d.radius * _this.chance.integer({
          min: 1.5,
          max: 10
        });
      };
    })(this)).iterations(4)).force('link', d3.forceLink(this.links).distance(10).strength(0.9)).force('center', d3.forceCenter(this.width / 2, this.height / 2));
    return this.data;
  };

  art.tick = function() {
    if (!this.ticks) {
      this.ticks = 0;
    }
    this.ticks++;
    this.simulation.tick();
    if (this.drawLinks && this.ticks === (this.numTicks - 1)) {
      this.links.forEach((function(_this) {
        return function(d, i) {
          _this.ctx.beginPath();
          _this.ctx.moveTo(d.source.x, d.source.y);
          _this.ctx.lineTo(d.target.x, d.target.y);
          _this.ctx.strokeStyle = 'rgba(255,255,255,0.9)';
          return _this.ctx.stroke();
        };
      })(this));
    }
    return this.data.forEach((function(_this) {
      return function(d, i) {
        var c, chg, noiseValue;
        noiseValue = _this.simplex.noise2D(d.x, d.y);
        d.x = _.clamp(d.x, 0, _this.width);
        d.y = _.clamp(d.y, 0, _this.height);
        if (i === 1) {
          d.x += _this.chance.floating({
            min: -1.5,
            max: 1.5
          });
          d.y += _this.chance.floating({
            min: -1.5,
            max: 1.5
          });
          d.vx += _this.chance.floating({
            min: -0.1,
            max: 1.5
          });
          d.vy += _this.chance.floating({
            min: -0.1,
            max: 1.5
          });
          chg = _this.chance.floating({
            min: -1.7,
            max: 1.7
          });
          if (_this.chance.bool) {
            d.x -= chg;
            d.y -= chg;
          } else {
            d.x += chg;
            d.y += chg;
          }
        }
        if (noiseValue > 0 && _this.chance.bool()) {
          d.vx += _this.chance.floating({
            min: -1,
            max: 1
          });
          d.vy += _this.chance.floating({
            min: -1,
            max: 1
          });
        }
        c = d3.hsl(d.color);
        c.h += _this.chance.floating({
          min: -0.5,
          max: 1
        }) * 0.1;
        if (c.h === 359) {
          c.h = 0;
        }
        c.opacity = d.opacity;
        d.color = c.toString();
        _this.ctx.beginPath();
        _this.ctx.arc(d.x, d.y, d.radius, 0, 2 * Math.PI);
        _this.ctx.fillStyle = d.color;
        _this.ctx.fill();
        return _this.ctx.closePath();
      };
    })(this));
  };

  run = function() {
    if (argv.seed) {
      seed = argv.seed;
    } else {
      seed = Date.now();
    }
    art.seed = seed;
    return art.init({
      save: true
    });
  };

  if (require.main === module) {
    run();
  }

  module.exports = art;

}).call(this);
