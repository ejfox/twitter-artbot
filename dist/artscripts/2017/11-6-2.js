// Generated by CoffeeScript 1.12.6
(function() {
  var GenArt, _, argv, art, clColors, d3, options, path, run, seed;

  path = require('path');

  d3 = require('d3');

  argv = require('yargs').alias('s', 'seed').argv;

  seed = Date.now();

  _ = require('lodash');

  clColors = require('nice-color-palettes/100');

  GenArt = require('./../GenArt');

  options = {
    filename: path.basename(__filename, '.js') + '-' + seed,
    count: 11,
    randomizeCount: true,
    numTicks: 7777,
    randomizeTicks: true,
    bgColor: 'white',
    fillColor: 'black'
  };

  art = new GenArt(seed, options);

  art.makeParticles = function() {
    console.log('Making ' + this.count + ' particles');
    this.colors = this.chance.pickone(clColors);
    this.color = this.chance.pickone(this.colors);
    this.ctx.globalCompositeOperation = 'multiply';
    if (this.count <= 2) {
      this.count = 3;
    }
    this.curveOptions = [d3.curveBasisClosed, d3.curveBasisOpen, d3.curveNatural, d3.curveStep];
    this.line = d3.line().x(function(d) {
      return d.x;
    }).y(function(d) {
      return d.y;
    }).curve(d3.curveBasisClosed).context(this.ctx);
    this.data = d3.range(this.count).map((function(_this) {
      return function() {
        var c, offset, offsetAmount, x, y;
        offsetAmount = _this.chance.integer({
          min: 125,
          max: _this.width
        });
        offset = {};
        offset.x = _this.chance.floating({
          min: -offsetAmount,
          max: offsetAmount
        });
        offset.y = _this.chance.floating({
          min: -offsetAmount,
          max: offsetAmount
        });
        x = (_this.width / 2) + offset.x;
        y = (_this.height / 2) + offset.y;
        c = d3.hsl('white');
        c.opacity = _this.opacity;
        return {
          x: x,
          y: y,
          color: c.toString(),
          radius: 4
        };
      };
    })(this));
    return this.data;
  };

  art.tick = function() {
    var c, sStep, ticks;
    if (!this.ticks) {
      ticks = 0;
    }
    this.ticks++;
    this.data.forEach((function(_this) {
      return function(d, i) {
        var maxStep, noiseValue;
        noiseValue = _this.simplex.noise2D(d.x, d.y);
        d.x = _.clamp(d.x, 0, _this.width);
        d.y = _.clamp(d.y, 0, _this.height);
        maxStep = 8;
        if (_this.chance.bool({
          likelihood: 50
        })) {
          d.x += _this.chance.floating({
            min: -maxStep,
            max: maxStep
          });
        }
        if (_this.chance.bool({
          likelihood: 50
        })) {
          d.y += _this.chance.floating({
            min: -maxStep,
            max: maxStep
          });
        }
        if (noiseValue > 0) {
          return d.x += _this.chance.floating({
            min: -maxStep,
            max: maxStep
          });
        } else {
          return d.y += _this.chance.floating({
            min: -maxStep,
            max: maxStep
          });
        }
      };
    })(this));
    c = d3.hsl(this.color);
    if (this.chance.bool()) {
      sStep = 0.01;
      c.s += this.chance.floating({
        min: -sStep,
        max: sStep
      });
    }
    if (this.chance.bool()) {
      c.h += 0.1;
    }
    if (c.h === 359) {
      d.h = 0;
    }
    c.opacity = 0.1;
    this.color = c.toString();
    this.ctx.beginPath();
    this.line(this.data);
    this.ctx.lineWidth = 1.2;
    this.ctx.strokeStyle = this.color;
    return this.ctx.stroke();
  };

  run = function() {
    if (argv.seed) {
      seed = argv.seed;
    } else {
      seed = Date.now();
    }
    art.seed = seed;
    return art.init({
      save: true
    });
  };

  if (require.main === module) {
    run();
  }

  module.exports = art;

}).call(this);
