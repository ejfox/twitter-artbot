// Generated by CoffeeScript 1.12.6
(function() {
  var GenArt, argv, art, clColors, d3, options, path, run, seed;

  path = require('path');

  d3 = require('d3');

  argv = require('yargs').alias('s', 'seed').argv;

  seed = Date.now();

  clColors = require('nice-color-palettes/100');

  GenArt = require('@ejfox/four-seventeen');

  options = {
    filename: path.basename(__filename, '.js') + '-' + seed,
    count: 120,
    randomizeCount: true,
    numTicks: 12,
    randomizeCount: true,
    bgColor: 'white',
    fillColor: 'rgba(0,0,0,0.2)'
  };

  art = new GenArt(seed, options);

  art.makeParticles = function() {
    this.colors = this.chance.pickone(clColors);
    console.log('Making ' + this.count + ' particles');
    this.data = d3.range(this.count).map((function(_this) {
      return function() {
        var c, offset, offsetAmount, x, y;
        offsetAmount = _this.chance.integer({
          min: 25,
          max: 500
        });
        offset = {};
        offset.x = _this.chance.floating({
          min: -offsetAmount,
          max: offsetAmount
        });
        offset.y = _this.chance.floating({
          min: -offsetAmount,
          max: offsetAmount
        });
        x = (_this.width / 2) + offset.x;
        y = (_this.height / 2) + offset.y;
        c = d3.hsl('white');
        c.opacity = _this.opacity;
        return {
          x: x,
          y: y,
          color: c.toString(),
          maxStep: _this.chance.integer({
            min: 1,
            max: 992
          })
        };
      };
    })(this));
    this.voronoi = d3.voronoi().x(function(d) {
      return d.x;
    }).y(function(d) {
      return d.y;
    });
    return this.data;
  };

  art.tick = function() {
    var ticks;
    if (!this.ticks) {
      ticks = 0;
    }
    this.ticks++;
    this.data.forEach((function(_this) {
      return function(d, i) {
        var noiseValue;
        noiseValue = _this.simplex.noise2D(d.x, d.y);
        if (_this.chance.bool({
          likelihood: 50
        })) {
          d.x += _this.chance.floating({
            min: -d.maxStep,
            max: d.maxStep
          });
        }
        if (_this.chance.bool({
          likelihood: 50
        })) {
          d.y += _this.chance.floating({
            min: -d.maxStep,
            max: d.maxStep
          });
        }
        if (noiseValue > 0) {
          return d.x += _this.chance.floating({
            min: -d.maxStep,
            max: d.maxStep
          });
        } else {
          return d.y += _this.chance.floating({
            min: -d.maxStep,
            max: d.maxStep
          });
        }
      };
    })(this));
    this.diagram = this.voronoi(this.data);
    this.links = this.diagram.links();
    this.polygons = this.diagram.polygons();
    return this.polygons.forEach((function(_this) {
      return function(d, i) {
        var color;
        if (d[0]) {
          _this.ctx.moveTo(d[0][0], d[0][1]);
          d.forEach(function(m, j) {
            if (d[j]) {
              return _this.ctx.lineTo(d[j][0], d[j][1]);
            }
          });
          _this.ctx.lineWidth = 0.5;
          color = _this.chance.pickone(_this.colors);
          _this.ctx.strokeStyle = color;
          _this.ctx.closePath();
          return _this.ctx.stroke();
        }
      };
    })(this));
  };

  run = function() {
    if (argv.seed) {
      seed = argv.seed;
    } else {
      seed = Date.now();
    }
    art.seed = seed;
    return art.init({
      save: true
    });
  };

  if (require.main === module) {
    run();
  }

  module.exports = art;

}).call(this);
