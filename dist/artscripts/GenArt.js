// Generated by CoffeeScript 1.12.6
(function() {
  var Chance, GenArt, _, argv, canvasModule, d3, d3Node, fs, path, run,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  d3 = require('d3');

  _ = require('lodash');

  d3Node = require('d3-node');

  canvasModule = require('canvas-prebuilt');

  Chance = require('chance');

  path = require('path');

  argv = require('yargs').alias('s', 'seed').argv;

  GenArt = (function() {
    function GenArt(seed) {
      this.tick = bind(this.tick, this);
      this.makeParticles = bind(this.makeParticles, this);
      this.init = bind(this.init, this);
      this.seed = seed;
      this.chance = new Chance(this.seed);
      this.count = 65;
      this.numTicks = 120;
      this.opacity = 1;
      this.text = this.seed;
      this.width = 1080;
      this.height = 720;
      this.bgColor = 'black';
    }

    GenArt.prototype.makeCanvas = function() {
      var d3n;
      d3n = new d3Node({
        canvasModule: canvasModule
      });
      this.canvas = d3n.createCanvas(this.width, this.height);
      this.ctx = this.canvas.getContext('2d');
      this.ctx.fillStyle = this.bgColor;
      return this.ctx.fillRect(0, 0, this.width, this.height);
    };

    GenArt.prototype.init = function(options, callback) {
      if (options == null) {
        options = {};
      }
      console.log('Seed:', this.seed);
      console.log('width', this.width, 'height', this.height);
      this.makeCanvas();
      this.makeParticles();
      this.tickTil(this.numTicks);
      if (options.save) {
        this.saveFile();
      }
      if (callback) {
        return callback();
      }
    };

    GenArt.prototype.makeParticles = function() {
      console.log('Making ' + this.count + ' particles');
      this.data = d3.range(this.count).map((function(_this) {
        return function() {
          var c, offset, offsetAmount, x, y;
          offsetAmount = 250;
          offset = {};
          offset.x = _this.chance.floating({
            min: -offsetAmount,
            max: offsetAmount
          });
          offset.y = _this.chance.floating({
            min: -offsetAmount,
            max: offsetAmount
          });
          x = (_this.width / 2) + offset.x;
          y = (_this.height / 2) + offset.y;
          c = d3.hsl('white');
          c.opacity = _this.opacity;
          return {
            x: x,
            y: y,
            color: c.toString()
          };
        };
      })(this));
      return this.data;
    };

    GenArt.prototype.tick = function() {
      var ticks;
      if (!this.ticks) {
        ticks = 0;
      }
      this.ticks++;
      return this.data.forEach((function(_this) {
        return function(d, i) {
          if (_this.chance.bool({
            likelihood: 50
          })) {
            d.x += _this.chance.floating({
              min: -8,
              max: 8
            });
          }
          if (_this.chance.bool({
            likelihood: 50
          })) {
            d.y += _this.chance.floating({
              min: -8,
              max: 8
            });
          }
          _this.ctx.beginPath();
          _this.ctx.rect(d.x, d.y, 2, 2);
          _this.ctx.fillStyle = d.color;
          _this.ctx.fill();
          return _this.ctx.closePath();
        };
      })(this));
    };

    GenArt.prototype.tickTil = function(count) {
      var j, ref;
      console.log('Ticking ' + this.data.length + ' particles ' + count + ' times');
      console.time('Ticked for');
      for (j = 0, ref = count; 0 <= ref ? j <= ref : j >= ref; 0 <= ref ? j++ : j--) {
        this.tick();
      }
      return console.timeEnd('Ticked for');
    };

    GenArt.prototype.saveFile = function(filename, callback) {
      var file, fileOutput, stream;
      if (!filename && !this.filename) {
        filename = path.basename(__filename, '.js') + '-' + this.seed;
      } else if (!filename && this.filename) {
        filename = this.filename;
      }
      fileOutput = './dist/' + filename + '.png';
      file = fs.createWriteStream(fileOutput);
      stream = this.canvas.pngStream().pipe(file);
      return stream.on('finish', function() {
        console.log('canvas output --> ' + fileOutput);
        if (callback) {
          return callback();
        }
      });
    };

    return GenArt;

  })();

  run = function() {
    var genart, seed;
    console.log(' -- run');
    if (argv.seed) {
      seed = argv.seed;
    } else {
      seed = Date.now();
    }
    genart = new GenArt(seed);
    if (argv.count) {
      genart.count = argv.count;
    }
    if (argv.ticks) {
      genart.numTicks = argv.ticks;
    }
    return genart.init({
      save: true
    });
  };

  if (require.main === module) {
    console.log('Running as module');
    run();
  }

  module.exports = GenArt;

}).call(this);
