// Generated by CoffeeScript 1.12.6
(function() {
  var Chance, GenArt, _, argv, canvasModule, d3, d3Node, fs, path, run,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  d3 = require('d3');

  _ = require('lodash');

  d3Node = require('d3-node');

  canvasModule = require('canvas-prebuilt');

  Chance = require('chance');

  path = require('path');

  argv = require('yargs').alias('s', 'seed').argv;

  GenArt = (function() {
    function GenArt(seed) {
      this.tick = bind(this.tick, this);
      this.makeParticles = bind(this.makeParticles, this);
      this.init = bind(this.init, this);
      var d3n;
      console.log('Seed:', seed);
      d3n = new d3Node({
        canvasModule: canvasModule
      });
      this.seed = seed;
      this.chance = new Chance(this.seed);
      this.count = 65;
      this.numTicks = 16;
      this.text = 'Go all the way';
      if (this.chance.bool()) {
        this.text = this.chance.pickone(this.text.split(''));
      }
      this.count = this.chance.integer({
        min: 1,
        max: this.count
      });
      this.numTicks = this.chance.integer({
        min: 1,
        max: this.numTicks
      });
      this.width = 1250;
      this.height = 1250;
      console.log('width', this.width, 'height', this.height);
      this.canvas = d3n.createCanvas(this.width, this.height);
      this.ctx = this.canvas.getContext('2d');
      this.ctx.fillStyle = 'black';
      this.ctx.fillRect(0, 0, this.width, this.height);
    }

    GenArt.prototype.init = function(options, callback) {
      if (options == null) {
        options = {};
      }
      this.makeParticles();
      this.tickTil(this.numTicks);
      if (options.save) {
        this.saveFile();
      }
      if (callback) {
        return callback();
      }
    };

    GenArt.prototype.makeParticles = function() {
      var baseText;
      console.log('Making ' + this.count + ' particles');
      baseText = ["If you're going to try", "go all the way", "Otherwise, don't even start", "This could mean losing girlfriends", "wives", "relatives", "maybe even your mind", "It could mean not eating", "for three or four days", "It could mean", "freezing on a park bench", "jail", "derision", "mockery", "isolation", "Isolation is the gift", "All the others", "are a test of your endurance", "of how much you really want to do it", "And, you'll do it", "despite rejection", "and the worst odds", "And it will be better", "than anything else you can imagine", "If you're going to try", "go all the way", "There is no other feeling like that", "You will be alone with the gods, and the nights will flame with fire", "You will ride life straight to perfect laughter", "find me"];
      this.data = d3.range(this.count).map((function(_this) {
        return function() {
          var c, x, y;
          x = (_this.width / 2) + _this.chance.floating({
            min: -200,
            max: 200
          });
          y = (_this.height / 2) + _this.chance.floating({
            min: -200,
            max: 200
          });
          c = d3.hsl('black');
          return {
            x: x,
            y: y,
            color: c.toString(),
            text: _this.chance.pickone(baseText),
            radius: _this.chance.integer({
              min: 34,
              max: _this.width / 1.4
            })
          };
        };
      })(this));
      return this.data;
    };

    GenArt.prototype.tick = function() {
      this.ticks++;
      return this.data.forEach((function(_this) {
        return function(d, i) {
          var c, chardWid, j, letter, randOffset, ref, results, startAngle, text, textSize;
          randOffset = 14;
          if (_this.chance.d100() > 50) {
            d.x -= _this.chance.integer({
              min: 0,
              max: randOffset
            });
          }
          if (_this.chance.d100() > 50) {
            d.y -= _this.chance.integer({
              min: 0,
              max: randOffset
            });
          }
          c = d3.hsl(d.color);
          c.h += _this.chance.natural({
            min: 0,
            max: 90
          });
          d.color = c.toString();
          textSize = _this.chance.integer({
            min: 2,
            max: 8
          });
          textSize += d.radius / 12;
          _this.ctx.font = textSize + ' monospace';
          _this.ctx.translate(d.x, d.y);
          text = d.text.split('');
          if (d.radius < 20) {
            text = text[0];
          }
          startAngle = Math.PI;
          _this.ctx.textBaseline = 'middle';
          _this.ctx.textAlign = 'center';
          _this.ctx.fillStyle = 'white';
          results = [];
          for (i = j = 0, ref = d.text.length; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
            chardWid = textSize / _this.chance.floating({
              min: 1.5,
              max: 2.5
            });
            letter = text[i];
            if (letter) {
              if (_this.chance.bool({
                likelihood: 75
              })) {
                _this.ctx.rotate((chardWid / 2) / (d.radius / 2 - textSize));
              }
              _this.ctx.fillText(letter, 0, 0 - d.radius / 2 + textSize / 2);
              results.push(_this.ctx.rotate((chardWid / 2) / (d.radius / 2 - textSize)));
            } else {
              results.push(void 0);
            }
          }
          return results;
        };
      })(this));
    };

    GenArt.prototype.tickTil = function(count) {
      var j, ref;
      console.log('Ticking ' + this.data.length + ' particles ' + count + ' times');
      console.time('ticked for');
      for (j = 0, ref = count; 0 <= ref ? j <= ref : j >= ref; 0 <= ref ? j++ : j--) {
        this.tick();
      }
      return console.timeEnd('ticked for');
    };

    GenArt.prototype.saveFile = function(filename) {
      var fileOutput;
      if (!filename) {
        filename = path.basename(__filename, '.js') + '-' + this.seed;
      }
      fileOutput = './dist/' + filename + '.png';
      console.log('canvas output --> ' + fileOutput);
      return this.canvas.pngStream().pipe(fs.createWriteStream(fileOutput));
    };

    return GenArt;

  })();

  run = (function(_this) {
    return function() {
      var genart, seed;
      if (argv.seed) {
        seed = argv.seed;
      } else {
        seed = Date.now();
      }
      genart = new GenArt(seed);
      if (argv.count) {
        genart.count = argv.count;
      }
      if (argv.ticks) {
        genart.numTicks = argv.ticks;
      }
      return genart.init({
        save: true
      });
    };
  })(this);

  module.exports = GenArt;

  if (require.main === module) {
    run();
  }

}).call(this);
