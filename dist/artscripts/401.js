// Generated by CoffeeScript 1.12.6
(function() {
  var Chance, GenArt, _, argv, canvasModule, d3, d3Node, fs, path, run,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  d3 = require('d3');

  _ = require('lodash');

  d3Node = require('d3-node');

  canvasModule = require('canvas-prebuilt');

  Chance = require('chance');

  path = require('path');

  argv = require('yargs').alias('s', 'seed').argv;

  GenArt = (function() {
    function GenArt(seed) {
      this.tick = bind(this.tick, this);
      this.makeParticles = bind(this.makeParticles, this);
      this.init = bind(this.init, this);
      var d3n;
      console.log('Seed:', seed);
      d3n = new d3Node({
        canvasModule: canvasModule
      });
      this.seed = seed;
      this.chance = new Chance(this.seed);
      this.count = 640;
      this.count = this.chance.integer({
        min: 1,
        max: this.count
      });
      this.numTicks = this.chance.integer({
        min: 1,
        max: this.count * this.chance.integer({
          min: 10,
          max: 80
        })
      });
      this.width = 1700;
      this.height = 1250;
      console.log('width', this.width, 'height', this.height);
      this.canvas = d3n.createCanvas(this.width, this.height);
      this.ctx = this.canvas.getContext('2d');
      this.ctx.fillStyle = '#DBE2CE';
      this.ctx.fillRect(0, 0, this.width, this.height);
      if (this.chance.bool({
        likelihood: 95
      })) {
        this.ctx.globalCompositeOperation = 'multiply';
      }
    }

    GenArt.prototype.init = function(options, callback) {
      if (options == null) {
        options = {};
      }
      this.makeParticles();
      this.tickTil(this.numTicks);
      if (options.save) {
        this.saveFile();
      }
      if (callback) {
        return callback();
      }
    };

    GenArt.prototype.makeParticles = function() {
      var centerCount;
      console.log('Making ' + this.count + ' particles');
      centerCount = this.chance.natural({
        min: 2,
        max: 32
      });
      console.log(centerCount + ' centers');
      this.data = d3.range(this.count).map((function(_this) {
        return function(d, i) {
          var c, x, y;
          x = _this.width / 2;
          y = _this.height / 2;
          c = d3.hsl('black');
          c.opacity = 0.01;
          return {
            x: x,
            y: y,
            color: c.toString(),
            cnum: i % centerCount
          };
        };
      })(this));
      return this.centers = d3.range(centerCount).map((function(_this) {
        return function() {
          var c, color, colors, divisor, moveSize, x, y;
          divisor = _this.chance.integer({
            min: 2,
            max: 6
          });
          moveSize = _this.width / divisor;
          x = (_this.width / 2) + _this.chance.integer({
            min: -moveSize,
            max: moveSize
          });
          y = (_this.height / 2) + _this.chance.integer({
            min: -moveSize,
            max: moveSize
          });
          colors = ['#FFDE2C', '#FA9921', '#FF0D5D'];
          if (_this.chance.bool()) {
            colors.push('#DBE2CE');
          }
          color = _this.chance.pickone(colors);
          c = d3.hsl(color);
          return {
            x: x,
            y: y,
            color: c.toString()
          };
        };
      })(this));
    };

    GenArt.prototype.tick = function() {
      var divisor, randOffset;
      this.ticks++;
      divisor = this.chance.integer({
        min: 1.1,
        max: 16
      });
      randOffset = this.chance.integer({
        min: 2,
        max: this.width / divisor
      });
      if (this.ticks % 100) {
        this.centers = this.centers.forEach(function(d, i) {
          if (this.chance.bool()) {
            d.x += randOffset;
          }
          if (this.chance.bool()) {
            return d.y += randOffset;
          }
        });
      }
      return this.data.forEach((function(_this) {
        return function(d, i) {
          var c, cNum, center, centerN, centerP, o1, o2;
          if (_this.chance.bool({
            likelihood: 50
          })) {
            d.x += _this.chance.integer({
              min: -randOffset,
              max: randOffset
            });
          }
          if (_this.chance.bool({
            likelihood: 50
          })) {
            d.y += _this.chance.integer({
              min: -randOffset,
              max: randOffset
            });
          }
          if (_this.chance.bool({
            likelihood: 4
          })) {
            d.cnum = _this.chance.integer({
              min: 0,
              max: _this.centers.length - 1
            });
          }
          cNum = d.cnum;
          center = _this.centers[cNum];
          centerN = _this.centers[cNum + 1];
          centerP = _this.centers[cNum - 1];
          d.x = _.clamp(d.x, center.x - randOffset, center.x + randOffset);
          d.y = _.clamp(d.y, center.y - randOffset, center.y + randOffset);
          c = d3.hsl(center.color);
          c.opacity = 0.01;
          d.color = c.toString();
          _this.ctx.beginPath();
          if (_this.chance.bool({
            likelihood: 25
          })) {
            d.x = center.x;
            d.y = center.y;
            _this.ctx.moveTo(d.x, d.y);
          }
          o1 = _this.chance.integer({
            min: -250,
            max: 250
          });
          o2 = _this.chance.integer({
            min: -250,
            max: 250
          });
          _this.ctx.quadraticCurveTo(d.x + o1, d.y + o2, d.x, d.y);
          _this.ctx.strokeStyle = d.color;
          return _this.ctx.stroke();
        };
      })(this));
    };

    GenArt.prototype.tickTil = function(count) {
      var j, ref;
      console.log('Ticking ' + this.data.length + ' particles ' + count + ' times');
      console.time('ticked for');
      for (j = 0, ref = count; 0 <= ref ? j <= ref : j >= ref; 0 <= ref ? j++ : j--) {
        this.tick();
      }
      return console.timeEnd('ticked for');
    };

    GenArt.prototype.saveFile = function(filename) {
      var fileOutput;
      if (!filename) {
        filename = path.basename(__filename, '.js') + '-' + this.seed;
      }
      fileOutput = './dist/' + filename + '.png';
      console.log('canvas output --> ' + fileOutput);
      return this.canvas.pngStream().pipe(fs.createWriteStream(fileOutput));
    };

    return GenArt;

  })();

  run = (function(_this) {
    return function() {
      var genart, seed;
      if (argv.seed) {
        seed = argv.seed;
      } else {
        seed = Date.now();
      }
      genart = new GenArt(seed);
      if (argv.count) {
        genart.count = argv.count;
      }
      if (argv.ticks) {
        genart.numTicks = argv.ticks;
      }
      return genart.init({
        save: true
      });
    };
  })(this);

  module.exports = GenArt;

  if (require.main === module) {
    run();
  }

}).call(this);
