// Generated by CoffeeScript 1.12.6
(function() {
  var Chance, GenArt, _, argv, canvasModule, colorLovers, d3, d3Node, fs, path, run,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  d3 = require('d3');

  _ = require('lodash');

  d3Node = require('d3-node');

  canvasModule = require('canvas-prebuilt');

  Chance = require('chance');

  path = require('path');

  colorLovers = require('colourlovers');

  argv = require('yargs').alias('s', 'seed').argv;

  GenArt = (function() {
    function GenArt(seed) {
      this.tick = bind(this.tick, this);
      this.makeParticles = bind(this.makeParticles, this);
      this.init = bind(this.init, this);
      var d3n;
      console.log('Seed:', seed);
      d3n = new d3Node({
        canvasModule: canvasModule
      });
      this.seed = seed;
      this.chance = new Chance(this.seed);
      this.count = 55;
      this.numTicks = 55000;
      this.count = this.chance.integer({
        min: 1,
        max: this.count
      });
      this.numTicks = this.chance.integer({
        min: 1,
        max: this.numTicks
      });
      this.width = 1700;
      this.height = 1250;
      console.log('width', this.width, 'height', this.height);
      this.canvas = d3n.createCanvas(this.width, this.height);
      this.ctx = this.canvas.getContext('2d');
      this.ctx.globalCompositeOperation = 'multiply';
      this.ctx.fillStyle = 'white';
      this.ctx.fillRect(0, 0, this.width, this.height);
    }

    GenArt.prototype.init = function(options, callback) {
      if (options == null) {
        options = {};
      }
      return colorLovers.get('/palettes', {
        keywords: this.chance.pickone(['vintage', 'neon', 'toy'], {
          sortBy: 'DESC',
          numResults: 1,
          orderCol: this.chance.pickone(['dateCreated', 'score', 'name', 'numVotes', 'numViews'])
        })
      }, (function(_this) {
        return function(err, data) {
          var colors, rndColor;
          rndColor = _this.chance.integer({
            min: 1,
            max: data.length
          });
          colors = data[rndColor].colors;
          colors = colors.map(function(c) {
            return '#' + c;
          });
          _this.bg = colors[0];
          _this.ctx.fillStyle = _this.bg;
          _this.ctx.fillRect(0, 0, _this.width, _this.height);
          if (_this.chance.bool({
            likelihood: 10
          })) {
            _this.ctx.fillStyle = '#000';
            _this.ctx.fillRect(0, 0, _this.width, _this.height);
          }
          console.log('colors ->', colors);
          if (!err) {
            _this.c10 = d3.scaleOrdinal().range(colors);
          } else {
            _this.c10 = d3.scaleOrdinal().range(['#FFF', '#000', 'red']);
          }
          _this.makeParticles();
          _this.tickTil(_this.numTicks);
          if (options.save) {
            _this.saveFile();
          }
          if (callback) {
            return callback();
          }
        };
      })(this));
    };

    GenArt.prototype.makeParticles = function() {
      console.log('Making ' + this.count + ' particles');
      this.data = d3.range(this.count).map((function(_this) {
        return function() {
          var prclColor, x, y;
          x = _this.width / 2;
          y = _this.height / 2;
          prclColor = _this.c10;
          return {
            x: x,
            y: y,
            color: prclColor(_this.ticks),
            positions: [],
            radius: 2,
            jitter: _this.chance.integer({
              min: 0,
              max: 100
            })
          };
        };
      })(this));
      return this.data;
    };

    GenArt.prototype.tick = function() {
      var dLikelies, ticks;
      if (!this.ticks) {
        ticks = 0;
      }
      this.ticks++;
      dLikelies = d3.range(4).map((function(_this) {
        return function() {
          return _this.chance.integer({
            min: 0,
            max: 280
          });
        };
      })(this));
      return this.data.forEach((function(_this) {
        return function(d, i) {
          var c, moveUnit;
          moveUnit = _this.chance.integer({
            min: d.radius / 5,
            max: d.radius * 5
          });
          if (_this.chance.bool({
            likelihood: _.clamp(dLikelies[0] + 50, 0, 100)
          })) {
            d.y += moveUnit;
          }
          if (_this.chance.bool({
            likelihood: _.clamp(dLikelies[1] + 50, 0, 100)
          })) {
            d.y -= moveUnit;
          }
          if (_this.chance.bool({
            likelihood: _.clamp(dLikelies[2] + 50, 0, 100)
          })) {
            d.x += moveUnit;
          }
          if (_this.chance.bool({
            likelihood: _.clamp(dLikelies[3] + 50, 0, 100)
          })) {
            d.x -= moveUnit;
          }
          if (_this.chance.bool({
            likelihood: d.jitter
          })) {
            d.y += moveUnit / 2;
          }
          if (_this.chance.bool({
            likelihood: d.jitter
          })) {
            d.y -= moveUnit / 2;
          }
          if (_this.chance.bool({
            likelihood: d.jitter
          })) {
            d.x += moveUnit / 2;
          }
          if (_this.chance.bool({
            likelihood: d.jitter
          })) {
            d.x -= moveUnit / 2;
          }
          c = d3.hsl(d.color);
          c.h += _this.chance.integer({
            min: -20,
            max: 20
          });
          d.color = c.toString();
          _this.ctx.beginPath();
          _this.ctx.arc(d.x, d.y, d.radius, 0, Math.PI * 2, true);
          _this.ctx.fillStyle = d.color;
          return _this.ctx.fill();
        };
      })(this));
    };

    GenArt.prototype.tickTil = function(count) {
      var j, ref;
      console.log('Ticking ' + this.data.length + ' particles ' + count + ' times');
      console.time('ticked for');
      for (j = 0, ref = count; 0 <= ref ? j <= ref : j >= ref; 0 <= ref ? j++ : j--) {
        this.tick();
      }
      return console.timeEnd('ticked for');
    };

    GenArt.prototype.saveFile = function(filename) {
      var fileOutput;
      if (!filename) {
        filename = path.basename(__filename, '.js') + '-' + this.seed;
      }
      fileOutput = './dist/' + filename + '.png';
      console.log('canvas output --> ' + fileOutput);
      return this.canvas.pngStream().pipe(fs.createWriteStream(fileOutput));
    };

    return GenArt;

  })();

  run = (function(_this) {
    return function() {
      var genart, seed;
      if (argv.seed) {
        seed = argv.seed;
      } else {
        seed = Date.now();
      }
      genart = new GenArt(seed);
      if (argv.count) {
        genart.count = argv.count;
      }
      if (argv.ticks) {
        genart.numTicks = argv.ticks;
      }
      return genart.init({
        save: true
      });
    };
  })(this);

  module.exports = GenArt;

  if (require.main === module) {
    run();
  }

}).call(this);
