// Generated by CoffeeScript 1.12.6
(function() {
  var Chance, GenArt, _, argv, canvasModule, d3, d3Node, fs, run;

  fs = require('fs');

  d3 = require('d3');

  _ = require('lodash');

  d3Node = require('d3-node');

  canvasModule = require('canvas-prebuilt');

  Chance = require('chance');

  argv = require('yargs').alias('s', 'seed').argv;

  GenArt = (function() {
    function GenArt(seed) {
      var d3n;
      console.log('Seed:', seed);
      d3n = new d3Node({
        canvasModule: canvasModule
      });
      this.ticks = 0;
      this.seed = seed;
      this.width = 1700;
      this.height = 1250;
      console.log('width', this.width, 'height', this.height);
      this.canvas = d3n.createCanvas(this.width, this.height);
      this.ctx = this.canvas.getContext('2d');
      this.chance = new Chance(this.seed);
      this.count = this.chance.integer({
        min: 0,
        max: 900
      });
      this.ctx.fillStyle = 'white';
      this.ctx.fillRect(0, 0, this.width, this.height);
      this.makeParticles();
      this.tickTil(200);
      this.saveFile();
    }

    GenArt.prototype.makeParticles = function() {
      var chance;
      console.log('Making ' + this.count + ' particles');
      chance = new Chance(this.seed);
      this.data = d3.range(this.count).map(function() {
        var x, y;
        x = chance.natural({
          min: 0,
          max: this.width
        });
        y = chance.natural({
          min: 0,
          max: this.height
        });
        return {
          x: x,
          y: y,
          color: 'black'
        };
      });
      return this.data;
    };

    GenArt.prototype.tick = function() {
      this.ticks++;
      return this.data.forEach((function(_this) {
        return function(d, i) {
          console.log('x', d.x, 'y', d.y);
          _this.ctx.beginPath();
          _this.ctx.rect(d.x, d.y, 12, 12);
          _this.ctx.fillStyle = d.color;
          _this.ctx.fill();
          return _this.ctx.closePath();
        };
      })(this));
    };

    GenArt.prototype.tickTil = function(count) {
      var j, ref, results;
      console.log('Ticking ' + this.data.length + ' particles ' + count + ' times');
      results = [];
      for (j = 0, ref = count; 0 <= ref ? j <= ref : j >= ref; 0 <= ref ? j++ : j--) {
        results.push(this.tick());
      }
      return results;
    };

    GenArt.prototype.saveFile = function() {
      var fileOutput;
      fileOutput = './dist/' + this.seed + '.png';
      console.log('canvas output --> ' + fileOutput);
      return this.canvas.pngStream().pipe(fs.createWriteStream(fileOutput));
    };

    return GenArt;

  })();

  run = function() {
    var art, seed;
    if (argv.seed) {
      seed = argv.seed;
    } else {
      seed = Date.now();
    }
    return art = new GenArt(seed);
  };

  module.exports = GenArt;

  if (require.main === module) {
    run();
  }

}).call(this);
