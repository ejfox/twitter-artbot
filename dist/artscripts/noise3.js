// Generated by CoffeeScript 1.12.6
(function() {
  var _, argv, canvasModule, d3, d3Node, d3n, fs, makeArt, randGen, run;

  fs = require('fs');

  d3 = require('d3');

  d3Node = require('d3-node');

  _ = require('lodash');

  canvasModule = require('canvas-prebuilt');

  randGen = require('random-seed');

  d3n = new d3Node({
    canvasModule: canvasModule
  });

  argv = require('yargs').alias('s', 'seed').argv;

  run = function() {
    var seed;
    if (argv.seed) {
      seed = argv.seed;
    } else {
      seed = Date.now();
    }
    return makeArt(seed);
  };

  makeArt = function(seed) {
    var canvas, colorScale, count, ctx, cycle, data, fileOutput, height, i, imgdata, k, rand, redPoints, width;
    rand = new randGen();
    rand.seed(seed);
    console.log('seed', seed);
    canvas = d3n.createCanvas(850, 625);
    ctx = canvas.getContext('2d');
    width = canvas.width;
    height = canvas.height;
    i = 0;
    imgdata = ctx.getImageData(0, 0, width, height);
    count = imgdata.data.length;
    colorScale = d3.scaleLinear().range(0, count).domain('#FFF', '#000');
    redPoints = d3.range(3).map(function() {
      return {
        x: rand(width),
        y: rand(height)
      };
    });
    data = d3.range(count).map(function() {
      var j, z;
      z = width;
      j = Math.abs((i % z) - (z / 2));
      i++;
      return {
        i: i,
        b: _.clamp(rand(255), 0, 255),
        j: j
      };
    });
    for (i = k = 1; k <= 3; i = ++k) {
      cycle = i;
      data.forEach(function(d, i) {
        var max, pixel;
        pixel = 4 * i;
        max = rand(80);
        if (rand(100 * cycle) > max) {
          imgdata.data[4 * i] = d.j;
          imgdata.data[4 * i + 1] = d.b;
          imgdata.data[4 * i + 2] = d.b;
          return imgdata.data[4 * i + 3] = 120;
        } else {
          imgdata.data[4 * i] = 255;
          imgdata.data[4 * i + 1] = 255;
          imgdata.data[4 * i + 2] = 255;
          return imgdata.data[4 * i + 3] = 255;
        }
      });
    }
    ctx.putImageData(imgdata, 0, 0);
    fileOutput = './dist/' + seed + '.png';
    console.log('canvas output --> ' + fileOutput);
    canvas.pngStream().pipe(fs.createWriteStream(fileOutput));
    return canvas;
  };

  module.exports = makeArt;

  if (require.main === module) {
    run();
  }

}).call(this);
